# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AndroidManifestAppinfo(models.Model):
    appid = models.IntegerField(db_column='AppID')  # Field name made lowercase.
    appname = models.TextField(db_column='AppName')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'Android_Manifest_AppInfo'


class AndroidManifestCommitinfo(models.Model):
    commit_val = models.TextField(db_column='Commit_val', blank=True, null=True)  # Field name made lowercase.
    author_name = models.TextField(db_column='Author_Name', blank=True, null=True)  # Field name made lowercase.
    author_email = models.TextField(db_column='Author_Email', blank=True, null=True)  # Field name made lowercase.
    commit_date = models.TextField(db_column='Commit_Date', blank=True, null=True)  # Field name made lowercase.
    appid = models.IntegerField(db_column='AppID')  # Field name made lowercase.
    commit_order = models.IntegerField(db_column='Commit_Order')  # Field name made lowercase.
    commit_id = models.IntegerField(db_column='Commit_ID')  # Field name made lowercase.
    commit_message = models.TextField(db_column='Commit_Message', blank=True, null=True)  # Field name made lowercase.
    versioncode = models.TextField(db_column='VersionCode', blank=True, null=True)  # Field name made lowercase.
    versionname = models.TextField(db_column='VersionName', blank=True, null=True)  # Field name made lowercase.
    minsdk = models.TextField(db_column='minSDK', blank=True, null=True)  # Field name made lowercase.
    targetsdk = models.TextField(db_column='targetSDK', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'Android_Manifest_CommitInfo'


class AndroidManifestIntent(models.Model):
    intent_id = models.IntegerField(db_column='Intent_ID')  # Field name made lowercase.
    intent = models.TextField(db_column='Intent')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'Android_Manifest_Intent'


class AndroidManifestPermission(models.Model):
    permission_id = models.IntegerField(db_column='Permission_ID')  # Field name made lowercase.
    permission = models.TextField(db_column='Permission')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'Android_Manifest_Permission'


class Androriskrun(models.Model):
    versionid = models.IntegerField(db_column='versionID', unique=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'AndroriskRun'


class Appdata(models.Model):
    appid = models.IntegerField(db_column='appId', blank=True, null=True)  # Field name made lowercase.
    name = models.CharField(max_length=40)
    description = models.TextField(blank=True, null=True)
    categories = models.TextField(blank=True, null=True)
    license = models.TextField(blank=True, null=True)
    auto_name = models.TextField(blank=True, null=True)
    provides = models.TextField(blank=True, null=True)
    website = models.TextField(blank=True, null=True)
    source_code = models.TextField(blank=True, null=True)
    issue_tracker = models.TextField(blank=True, null=True)
    donate = models.TextField(blank=True, null=True)
    flattrid = models.IntegerField(blank=True, null=True)
    bitcoin = models.TextField(blank=True, null=True)
    litecoin = models.TextField(blank=True, null=True)
    summary = models.CharField(max_length=50, blank=True, null=True)
    maintainer_notes = models.TextField(blank=True, null=True)
    repo_type = models.TextField(blank=True, null=True)
    antifeatures = models.TextField(blank=True, null=True)
    disabled = models.NullBooleanField()
    requires_root = models.NullBooleanField()
    archive_policy = models.TextField(blank=True, null=True)
    update_check_mode = models.TextField(blank=True, null=True)
    vercode_operation = models.TextField(blank=True, null=True)
    update_check_ignore = models.TextField(blank=True, null=True)
    auto_update_mode = models.TextField(blank=True, null=True)
    current_version = models.TextField(blank=True, null=True)
    current_build_number = models.IntegerField(blank=True, null=True)
    no_source_since = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'AppData'


class Codingstandard(models.Model):
    versionid = models.IntegerField(db_column='versionID', unique=True)  # Field name made lowercase.
    classes = models.IntegerField(blank=True, null=True)
    ncloc = models.IntegerField(blank=True, null=True)
    functions = models.IntegerField(blank=True, null=True)
    duplicated_lines = models.IntegerField(blank=True, null=True)
    test_errors = models.IntegerField(blank=True, null=True)
    skipped_tests = models.IntegerField(blank=True, null=True)
    complexity = models.IntegerField(blank=True, null=True)
    class_complexity = models.FloatField(blank=True, null=True)
    function_complexity = models.FloatField(blank=True, null=True)
    comment_lines = models.IntegerField(blank=True, null=True)
    comment_lines_density = models.FloatField(blank=True, null=True)
    duplicated_lines_density = models.FloatField(blank=True, null=True)
    files = models.IntegerField(blank=True, null=True)
    directories = models.IntegerField(blank=True, null=True)
    file_complexity = models.FloatField(blank=True, null=True)
    violations = models.IntegerField(blank=True, null=True)
    duplicated_blocks = models.IntegerField(blank=True, null=True)
    duplicated_files = models.IntegerField(blank=True, null=True)
    lines = models.IntegerField(blank=True, null=True)
    blocker_violations = models.IntegerField(blank=True, null=True)
    critical_violations = models.IntegerField(blank=True, null=True)
    major_violations = models.IntegerField(blank=True, null=True)
    minor_violations = models.IntegerField(blank=True, null=True)
    commented_out_code_lines = models.IntegerField(blank=True, null=True)
    line_coverage = models.FloatField(blank=True, null=True)
    branch_coverage = models.FloatField(blank=True, null=True)
    build_average_time_to_fix_failure = models.FloatField(blank=True, null=True)
    build_longest_time_to_fix_failure = models.FloatField(blank=True, null=True)
    build_average_builds_to_fix_failures = models.IntegerField(blank=True, null=True)
    generated_lines = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'CodingStandard'


class Githistory(models.Model):
    commitid = models.IntegerField(db_column='commitID', blank=True, null=True)  # Field name made lowercase.
    appid = models.IntegerField(db_column='appID', blank=True, null=True)  # Field name made lowercase.
    commit_hash = models.TextField(blank=True, null=True)
    author = models.TextField(blank=True, null=True)
    email = models.TextField(blank=True, null=True)
    time = models.IntegerField(blank=True, null=True)
    summary = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'GitHistory'


class Intent(models.Model):
    intentid = models.IntegerField(db_column='intentID', blank=True, null=True)  # Field name made lowercase.
    name = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Intent'


class IntentVersion(models.Model):
    intentid = models.IntegerField(db_column='intentID', blank=True, null=True)  # Field name made lowercase.
    versionid = models.IntegerField(db_column='versionID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'Intent_Version'
        unique_together = (('intentid', 'versionid'),)


class Overpermission(models.Model):
    permissionid = models.IntegerField(db_column='permissionID')  # Field name made lowercase.
    versionid = models.IntegerField(db_column='versionID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'OverPermission'
        unique_together = (('permissionid', 'versionid'),)


class Permission(models.Model):
    permissionid = models.IntegerField(db_column='permissionID', blank=True, null=True)  # Field name made lowercase.
    name = models.TextField()

    class Meta:
        managed = False
        db_table = 'Permission'


class Sonarrun(models.Model):
    versionid = models.IntegerField(db_column='versionID', unique=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'SonarRun'


class Stowawayrun(models.Model):
    versionid = models.IntegerField(db_column='versionID', unique=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'StowawayRun'


class Underpermission(models.Model):
    permissionid = models.IntegerField(db_column='permissionID')  # Field name made lowercase.
    versionid = models.IntegerField(db_column='versionID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'UnderPermission'
        unique_together = (('permissionid', 'versionid'),)


class Version(models.Model):
    versionid = models.IntegerField(db_column='versionID', blank=True, null=True)  # Field name made lowercase.
    appid = models.TextField(db_column='appID')  # Field name made lowercase. This field type is a guess.
    version = models.TextField(blank=True, null=True)
    build_number = models.IntegerField(blank=True, null=True)
    build_commit = models.TextField(blank=True, null=True)
    isapkexists = models.NullBooleanField(db_column='isAPKExists')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'Version'


class Vulnerability(models.Model):
    versionid = models.IntegerField(db_column='versionID')  # Field name made lowercase.
    fuzzy_risk = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'Vulnerability'
        unique_together = (('versionid', 'fuzzy_risk'),)


class AndroidManifestIntentJoin(models.Model):
    commit_id = models.IntegerField(db_column='Commit_ID')  # Field name made lowercase.
    intent_id = models.IntegerField(db_column='Intent_ID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'android_Manifest_intent_join'


class AndroidManifestPermissionJoin(models.Model):
    commit_id = models.IntegerField(db_column='Commit_ID')  # Field name made lowercase.
    permission_id = models.IntegerField(db_column='Permission_ID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'android_Manifest_permission_join'
